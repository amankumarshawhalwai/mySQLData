JOINS:
It combines two tables based on a standard column or condition.
Example: There is a student and a batch table. The Student table contains batch_id and it is also present in the batches table.
          So, we will join these two tables based on the batch_id and get our result.
Joins execute before the select statement since join creates intermediary tables and select runs on those to return the results.
******************************************************************************************************************
SELF JOIN:
The join that happens on the same table is based on a column that would be common to both.
The column that is used in self-join is called SELF-REFERENTIAL FOREIGN KEY

Example: A college has started a buddy program. A buddy is also a student who is a senior to a student.
         So, here we can self-join the student table using the condition student_id=buddy_id.

CODE: SELECT s1.name, s2.name
      FROM students s1
      JOIN students s2
      ON s1.buddy_id = s2.id;
******************************************************************************************************************
INNER JOIN: 
Join to output data from multiple tables if the conditions match
******************************************************************************************************************
OUTER JOIN:
Join to output data from multiple tables if the conditions do not match and put the non-matching rows as null.
******************************************************************************************************************
FULL JOIN:
Join where a) All rows that match the conditions.
           b) All rows that did not match the conditions from the left table.
           c) All rows that did not match the condition from the right table.
MySQL does not support Full-join
**********************************************************************************************************************
CROSS JOIN:
Join where each row of the left table is combined with each row from the right table.
It is used to combine data from 2 tables without any conditions.
*********************************************************************************************************************
TYPES OF OUTER JOIN:
a) LEFT JOIN
b) RIGHT JOIN
c) FULL JOIN

Examples:
Assume we have 2 tables: students and batches with the following data:

batches table:

batch_id	batch_name
1	Batch A
2	Batch B
3	Batch C

students table:
student_id	name	batch_id
   1	          John	     1
   2	          Jane	     1
   3	          Jim	   null
   4	          Ram	   null
   5	          Sita	     2

LEFT JOIN:
select s.name,b.batch_name
from student s left join batches b
on s.batch_id=b.batch_id;

OUTPUT:
Output of LEFT JOIN (Go row by row in left table - which is students and then look for match/matches):

John batchA
Jane batchA
Jim NULL
Ram NULL
Sita batchB
***************************
RIGHT JOIN:
select s.name,b.batch_name
from student s right join batches b
on s.batch_id=b.batch_id;

OUTPUT: 
Output of RIGHT JOIN (Go row by row in right table - which is the batches table and then look for match/matches): 
batchA has 2 matches - John and Jane batchB has 1 match - Sita batchC has 0 match - NULL

John batchA
Jane batchA
Sita batchB
NULL batchC
****************************************
FULL OUTER JOIN:
select s.name,b.batch_name
from student s full join batches b
on s.batch_id=b.batch_id;

OUTPUT:
Output of FULL JOIN (Do the left join. Then look at every row of right table which is batches and figure out rows which were not printed yet -
print them with null match)

John batchA
Jane batchA
Jim NULL
Ram NULL
Sita batchB
NULL batchC
********************************************************************************************************************************************
WHERE vs ON 

